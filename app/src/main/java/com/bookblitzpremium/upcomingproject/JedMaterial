@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        FirebaseApp.initializeApp(this)
        setContent {
            AppTheme {
//                InitializeDatabase()
                App()
//                MyScreen()
//                ReadLocalDatabase()
//                TravelOffersScreen()
//                AddHotelBookingScreen()
                val navController = rememberNavController()

//                    .setCustomContentView(notificationLayout)
//                    .setCustomBigContentView(notificationLayoutExpanded)
            }
        }
    }
}

@Composable
fun AddHotelBookingScreen(viewModel: RemoteHotelBookingViewModel = hiltViewModel()) {
    val coroutineScope = rememberCoroutineScope()

//    Button(onClick = {
//        val hotelBooking = HotelBooking(
//            startDate = "2025-04-23",
//            endDate = "2025-04-30",
//            numberOFClient = 2,
//            numberOfRoom = 1,
//            hotelID = "hotel123",
//            userid = "123",
//            paymentID = ""
//        )
//        coroutineScope.launch {
//            val id = viewModel.addHotelBooking(hotelBooking)
//            Log.d("HotelBooking", "Added booking with ID: $id")
//        }
//    }) {
//        Text("Add Hotel Booking")
//    }
}


@Composable
fun performUpdate() {
    val viewModel: LocalHotelBookingViewModel = hiltViewModel()
    val booking = HotelBooking(
        id = "1",
        startDate = "2025-04-23",
        endDate = "2025-04-30",
        numberOFClient = 20,
        numberOfRoom = 5,
        hotelID = "0HCQgp6kuauoYiRH094D",
        userid = "",
        paymentID = ""
    )
    val updatedBooking = booking.copy(userid = "123")
    viewModel.updateHotelBooking(updatedBooking)
}


@Preview(showBackground = true, widthDp = 360, heightDp = 806)
@Composable
fun App(
    navController: NavHostController = rememberNavController()
) {
    val startDestination = AppScreen.AuthGraph.route
    val backStackEntry by navController.currentBackStackEntryAsState()
    val currentScreen = AppScreen.fromRoute(
        backStackEntry?.destination?.route
    )

    Scaffold(
        topBar = {
            if (currentScreen.hasTopBar) {
                TitleBar(
                    currentScreen = currentScreen,
                    canNavigateBack = navController.previousBackStackEntry != null,
                    navigateUp = { navController.navigateUp() },
                    modifier = Modifier.padding(start = 20.dp)
                )
            }
        },
        bottomBar = {
            if (currentScreen.hasBottomBar) {
                BottomNavigationBar(navController)
            }
        }
    ) { innerPadding ->
        AppNavigation(navController, startDestination, Modifier.padding(innerPadding))
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TitleBar(
    currentScreen: AppScreen,
    canNavigateBack: Boolean,
    navigateUp: () -> Unit,
    modifier: Modifier = Modifier
) {
    CenterAlignedTopAppBar(
        title = {
            Text(
                text = currentScreen.route.replace(Regex("([a-z])([A-Z])"), "$1 $2"),
                fontWeight = FontWeight.Bold,
                fontSize = 20.sp,
                textAlign = TextAlign.Center,
                modifier = Modifier
                    .fillMaxWidth()
                    .offset(x = -20.dp)
            )
        },
        colors = TopAppBarDefaults.mediumTopAppBarColors(
            containerColor = Color.Transparent
        ),
        modifier = modifier.height(74.dp),
        navigationIcon = {
            if (canNavigateBack) {
                IconButton(
                    onClick = navigateUp,
                    modifier = Modifier.size(24.dp)
                ) {
                    Icon(
                        imageVector = Icons.Filled.ArrowBack,
                        contentDescription = stringResource(R.string.back_button),
                        modifier = Modifier.size(24.dp)
                    )
                }
            }
        }
    )
}

@Composable
fun BottomNavigationBar(navController: NavHostController) {
    BottomAppBar(
        modifier = Modifier.height(90.dp),
        containerColor = Color.Transparent
    ) {
        val navItems = BottomNavigation.entries.toTypedArray()
        val navBackStackEntry by navController.currentBackStackEntryAsState()
        val currentRoute = navBackStackEntry?.destination?.parent?.route
        var selectedIndex by remember { mutableIntStateOf(0) }

        LaunchedEffect(currentRoute) {
            selectedIndex = navItems.indexOfFirst { it.navigation.route == currentRoute }
        }
        Box(
            modifier = Modifier.fillMaxWidth(),
            contentAlignment = Alignment.Center
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .fillMaxHeight()
                    .height(64.dp),
                horizontalArrangement = Arrangement.SpaceAround,
                verticalAlignment = Alignment.CenterVertically
            ) {
                navItems.forEachIndexed { index, item ->
                    Column(
                        verticalArrangement = Arrangement.Center,
                        horizontalAlignment = Alignment.CenterHorizontally,
                        modifier = Modifier
                            .clickable(
                                enabled = index != selectedIndex,
                            ) {
                                selectedIndex = index
                                navController.navigate(item.navigation.route) {
                                    popUpTo(AppScreen.Home.route) {
                                        saveState = true
                                    }
                                    launchSingleTop = true
                                    restoreState = true
                                }
                            }
                            .size(64.dp)
                    ) {
                        Icon(
                            imageVector = item.icon,
                            contentDescription = null,
                            tint = if (index == selectedIndex) AppTheme.colorScheme.primary else Color.Gray,
                            modifier = Modifier
                                .size(32.dp)
                        )
                        Text(
                            text = item.title,
                            style = AppTheme.typography.smallRegular,
                            color = if (index == selectedIndex) AppTheme.colorScheme.primary else Color.Gray,
                        )
                    }
                }
            }
        }
    }
}

@Composable
fun ReadLocalDatabase(
    viewModel: LocalHotelBookingViewModel = hiltViewModel()
) {

//    val bookings by viewModel.hotelBookings.collectAsState()
    viewModel.fetchHotelBookingsByUserId("123")
    val bookingData by viewModel.hotelBookings.collectAsState()


    val booking = HotelBooking(
        id = "WAQWm6gJqqBRfdIhsZwS",
        startDate = "25-02-2025",
        endDate = "25-02-2025",
        numberOFClient =  1,
        numberOfRoom =  1,
        hotelID = "0HCQgp6kuauoYiRH094D",
        userid = "123", // Add real user ID if available
        paymentID = "" // Add real payment ID if available
    )

    Button(
        onClick = {
            viewModel.insertHotelBooking(booking)
        }
    ) {
        Text(text = "Store")
    }

//    LazyColumn(
//        modifier = Modifier
//            .fillMaxSize()
//            .background(Color.White)
//            .padding(top = 16.dp),
//        verticalArrangement = Arrangement.spacedBy(8.dp)
//    ) {
//        items(bookingData) { booking ->
//            Text("Booking ID: ${booking.id}", fontWeight = FontWeight.Bold)
//            Text("Start Date: ${booking.startDate}")
//            Text("End Date: ${booking.endDate}")
//            Text("Clients: ${booking.numberOFClient}")
//            Text("Rooms: ${booking.numberOfRoom}")
//            Text("Hotel ID: ${booking.hotelID}")
//            Text("User ID: ${booking.userid}")
//            Text("Payment ID: ${booking.paymentID}")
//            Spacer(modifier = Modifier.height(16.dp))
//        }
//    }
}


//    Column(modifier = Modifier.padding(16.dp)) {
//        bookings.forEach { booking ->
//            Text("Booking ID: ${booking.id}", fontWeight = FontWeight.Bold)
//            Text("Start Date: ${booking.startDate}")
//            Text("End Date: ${booking.endDate}")
//            Text("Clients: ${booking.numberOFClient}")
//            Text("Rooms: ${booking.numberOfRoom}")
//            Text("Hotel ID: ${booking.hotelID}")
//            Text("User ID: ${booking.userid}")
//            Text("Payment ID: ${booking.paymentID}")
//            Spacer(modifier = Modifier.height(16.dp))
//        }
//
//        if (bookings.isEmpty()) {
//            Text("No bookings found.")
//        }
//    }



    if (hotel != null) {
        val hotelData = hotel!!
        Log.d("HotelHeaderTable", "Hotel ID: ${hotelData.id}, Address: ${hotelData.address}")

        Row(modifier = modifier.fillMaxSize()) {
            Row(
                modifier = modifier.fillMaxSize()
            ) {

                Column(
                    modifier = Modifier
                        .weight(1f)
                        .fillMaxHeight()
                        .clip(RoundedCornerShape(topStart = 32.dp, topEnd = 32.dp))
                        .background(Color.White)
                ) {
                    val totalPrice = (roomCount ?: 0).toDouble() * hotelData.price
                    var copyPaymnetID = ""

                    if(rede){
                        PaymentDetails(
                            navController = navController,
                            totalPrice = totalPrice.toString(),
                            totalPerson = (adultCount ?: 0).toString(),
                            roomBooked = (roomCount ?: 0).toString(),
                            startDate = startDate.toString(),
                            endDate = endDate.toString(),
                            hotelID = hotelData.id.toString(),
                            paymentID = copyPaymnetID,
                            hotelImageUrl = hotelData.imageUrl,
                            modifier = Modifier
                        )

                    }else{

                        val features = "Free Wi-Fi, Free parking, Air-conditioned, Kid-friendly, Restaurant, Free breakfast"

                        HotelAmenitiesSection(features, modifier = Modifier)

                        LazyColumn {
                            item {
//                                HotelInfoCard(
//                                    hotel = hotelData,
//                                    reviewCount = 0,
//                                    modifier = Modifier
//                                )
                                HotelInfoSection(
                                    showBackButton = 2,
                                    modifier = Modifier,
                                    address = hotelData.address,
                                    rating = hotelData.rating,
                                    hotelName = hotelData.name,
                                    reviewTime = 1
                                )
                            }

                            item {

                            }
                            item { HotelDescriptionSection(showBackButton = 1, modifier = Modifier,generateHotelDescription(hotelData.name,hotelData.rating)) }

                            item{
                                BookingSummaryTable(
                                    startDate = startDate.toString(),
                                    endDate = endDate.toString(),
                                    roomCount = roomCount.toString(),
                                    adultCount = adultCount.toString()
                                )
                            }

                            item{

                            }

                            item {
                                var userID = FirebaseAuth.getInstance().currentUser?.uid

                                var coroutineScope = rememberCoroutineScope()
                                val paymentViewModel: RemotePaymentViewModel = hiltViewModel()

                                val payment = Payment(
                                    createDate = LocalDate.now().toString(),
                                    totalAmount = totalPrice,
                                    paymentMethod = startDate.toString(),
                                    cardNumber = "",
                                    currency = "Ringgit Malaysia",
                                    userID = userID.toString()
                                )

                                Button(
                                    colors = ButtonDefaults.buttonColors(
                                        containerColor = Color.Black,
                                        contentColor = Color.White
                                    ),
                                    shape = RoundedCornerShape(16.dp),
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(16.dp),
                                    enabled = startDate != null && endDate != null && roomCount != null && adultCount !=null,
                                    onClick = {

                                        coroutineScope.launch {
                                            try {
                                                val paymentID = paymentViewModel.addPayment(payment)
                                                if (paymentID.isNotEmpty()) {
                                                    copyPaymnetID = paymentID
                                                    rede = true
                                                } else {
                                                    // Handle empty paymentID
                                                }
                                            } catch (e: Exception) {
                                                e.printStackTrace()
                                            }
                                        }
                                    }
                                ) {
                                    Text(text = stringResource(R.string.next_button))
                                }
                            }
                            item { Spacer(modifier = Modifier.height(100.dp)) }
                        }
                    }
                }
            }
        }
    } else {
        // Handle loading or error state
        CircularProgressIndicator(modifier = Modifier)
    }}








